"""
Will be used for storing state of the chess board, determining if moves are legal, keeping logs of the moves
and creating the board
"""
# possible_positions = [[1, 2, 3, 4, 5, 6, 7, 8], ["A", "B", "C", "D", "E", "F", "G", "H"]]
# start_board = str("rnbqkbnrpppppppp                                PPPPPPPPRNBKQBNR")

# array = ["r", "a", "a3", "a4", "a5", "a6", "a7", "a8",
#          "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8",
#          "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8",
#          "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8",
#          "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8",
#          "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8",
#          "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8",
#          "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8"]

game_state = list[list[str]]

STARTING_BOARD: game_state = [

    ["♜", "♞", "♝", "♛", "♚", "♝", "♞", "♜"],
    ["♟", "♟", "♟", "♟", "♟", "♟", "♟", "♟"],
    [".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "."],
    ["♙", "♙", "♙", "♙", "♙", "♙", "♙", "♙"],
    ["♖", "♘", "♗", "♕", "♔", "♗", "♘", "♖"]
]


# ["♜", ".", "♝", ".", "♚", ".", ".", "♜"],
# ["♟", "♟", "♟", "♟", ".", "♟", "♟", "♟"],
# [".", ".", "♞", ".", ".", "♛", ".", "."],
# [".", ".", ".", "♘", ".", ".", ".", "."],
# [".", ".", ".", "♝", "♙", ".", ".", "."],
# [".", ".", ".", ".", ".", "♙", ".", "."],
# ["♙", "♙", "♙", "♙", ".", ".", "♙", "♙"],
# ["♖", ".", "♗", "♕", "♔", "♗", ".", "♖"]


# [".", ".", ".", ".", ".", ".", ".", "."],
# [".", ".", ".", "♙", ".", ".", ".", "."],
# [".", ".", ".", ".", ".", ".", ".", "♚"],
# [".", ".", ".", ".", ".", ".", ".", "."],
# [".", ".", ".", ".", ".", ".", ".", "."],
# [".", ".", ".", ".", ".", ".", ".", "."],
# ["♙", ".", ".", ".", ".", ".", ".", "♖"],
# ["♖", ".", ".", ".", ".", ".", "♕", "♔"]


def validation():
    king_count = 0
    pawn_count = 0
    game_state = ("♚", "♔")

    for i in range(0, len(game_state)):
        if game_state[i] == '♚' or '♔':
            king_count = king_count + 1
        if game_state[i] == '♟' or '♙':
            pawn_count = pawn_count + 1
    if king_count != 2 or pawn_count > 16 :
        print("This board invalid.")
    else:
        print("The board is valid.")
    return
print(validation())

print(STARTING_BOARD)

print("""
     A    B    C    D    E    F    G    H
   ┏━━━━┳━━━━┳━━━━┳━━━━┳━━━━┳━━━━┳━━━━┳━━━━┓
 1 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 2 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 3 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 4 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 5 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 6 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 7 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┣━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━╋━━━━┫
 8 ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃    ┃
   ┗━━━━┻━━━━┻━━━━┻━━━━┻━━━━┻━━━━┻━━━━┻━━━━┛
""")